// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      Role     @default(VISITOR)
  posts     Post[]
  sessions  Session[]
  accounts  Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Blog post model
model Post {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  excerpt     String?
  content     String
  published   Boolean    @default(false)
  featured    Boolean    @default(false)
  views       Int        @default(0)
  likes       Int        @default(0)
  readTime    Int?       // estimated reading time in minutes
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  categoryId  String?
  category    Category?  @relation(fields: [categoryId], references: [id])
  tags        Tag[]      @relation("PostTags")
  pageViews   PageView[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("posts")
}

// Category model
model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())

  @@map("categories")
}

// Tag model
model Tag {
  id        String @id @default(cuid())
  name      String @unique
  slug      String @unique
  posts     Post[] @relation("PostTags")
  createdAt DateTime @default(now())

  @@map("tags")
}

// Page view tracking model
model PageView {
  id        String   @id @default(cuid())
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  path      String
  title     String?
  userAgent String?
  ipAddress String   // anonymized IP
  country   String?
  city      String?
  referer   String?
  duration  Int?     // time spent in seconds
  sessionId String?
  visitedAt DateTime @default(now())
  createdAt DateTime @default(now())

  @@map("page_views")
}

// Online users tracking
model OnlineUser {
  id            String   @id @default(cuid())
  sessionId     String   @unique
  ipAddress     String?
  userAgent     String?
  firstActiveAt DateTime @default(now())
  lastActiveAt  DateTime @default(now())
  createdAt     DateTime @default(now())

  @@map("online_users")
}

// Site statistics aggregation
model SiteStats {
  id             Int      @id @default(1)
  totalViews     Int      @default(0)
  totalPosts     Int      @default(0)
  totalCategories Int     @default(0)
  totalTags      Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("site_stats")
}

// User roles enum
enum Role {
  ADMIN
  VISITOR
}
